<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Spring框架💯]]></title>
    <url>%2F2018%2F10%2F22%2Fpring%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[Spring IoC Inversion of Control：控制反转（将创建对象的主动权，从程序员自己手中交给容器，让容器按需求和依赖规则来创建和管理对象）是一种通过描述（Java中可以是XML或者注解）并通过第三方产生或者获取特定对象的方式 IoC容器：容纳和管理所有Bean（资源） IoC容器的设计：BeanFactory是SpringIoC容器定义的最底层的接口，ApplicationContext是其高级实现的扩展接口（最为常用） Bean的初始化与依赖注入是IoC容器的两大步骤 首先通过XML配置文件，将对象和依赖对象都配置到某个XML文件中； 然后通过BeanFactory类来自动实现注入过程 举例: id1234 &lt;/bean&gt;&lt;bean id=&quot;person&quot; class=&quot;person的全限定名&quot;&gt; &lt;property name=&quot;car&quot; ref=&quot;car&quot;&gt; &lt;/bean&gt; Spring Bean的生命周期]]></content>
      <categories>
        <category>SSM学习之路</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java编程基础😁]]></title>
    <url>%2F2018%2F10%2F22%2FJava%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[😉相关概念JDK: Java Development Kit (包含JRE，同时包括client和server端的)JRE: Java Runtime Enviorment (只包含client运行环境下的JVM：jre/bin/client/jvm.dll)IDE: Integrated Development Enviorment (e.g. Eclipse)问题空间（一项业务）&lt;=============&gt; 解空间（计算机） 😍(Object-oriented Programming）OOP基本思想 👌万物皆为对象👌 程序是对象的集合 每个对象都有自己的由其他对象所构成的存储 每个对象都有其类型（class），某一特定类型的所有对象都可以接收相同的消息 示例：创建了一个Student类型的对象，定义了该对象的引用s，同时对s发送getAge消息请求。Student s = new Student; s.getAge() 每个对象都提供服务，程序应该被理解为：通过调用其他对象提供的服务，来为用户提供服务 良好的OOP中，每个对象都可以很好的完成一项任务，但是它并不试图做更多的事 类创建者对类消费者（客户端程序员）隐藏具体实现，只暴露必需的部分【访问控制能便于维护+减轻开发任务，Java用关键字public、private、protected来设定*类的边界*，Java还设置了*包访问权限*】 🔥 继承 🔥（is-a和is-like-a关系）与组合 ❓❓❓ 多态 [在OOP中编译器无法产生传统意义上的函数调用，即“前期绑定”，Java缺省使用动态的“后期绑定”]——–向上转型upcasting*❓❓❓ 所有的类最终都继承于Object类（单根继承结构） 🔥 容器 🔥（e.g. C++的STL等；Java提供的诸多类似List/Map/Set等的容器，以及队列/树/堆栈等多种构件）【只需要创建一个容器对象，让它处理所有细节，而不需要管将来会将多少个对象置于容器中】 范型：创建一个容器并让它知道自己保存的对象的具体类型（非Object类型），避免向下转型的不安全性 🔥 对象的创建与生命周期 🔥：Java采用完全动态内存分配的方式，只能在堆上new一个对象，并且采用垃圾回收器机制（注：内存池—-&gt;堆） 异常处理与并发编程 C/S模式 客户端 服务器端 前端开发(界面) 安卓/IOS/PC开发/浏览器(JS,Applet) Web服务器，Servlet及JSP HTML/CSS 📝Java程序设计 数据存储到什么地方：寄存器(处理器内部)、堆栈、堆(memory pool，所有Java对象)、常量存储(程序内部)、非RAM存储(e.g.持久化对象和流对象) Java基本数据类型[强类型语言]：（每个基本数据类型都有自己的包装类）| boolean | char | byte | short | int | long | float | double | void | 类(class)：程序员定义的新数据类型【字段+方法】 static修饰的方法和字段是不依赖于类的对象而存在的，可以直接通过类名来访问，是没有this的方法。不论创建多少个对象，静态数据都只占用一份存储区域 类的数据成员能被Java自动初始化，而方法中的局部变量则不能，需要程序员手动初始化 🔥 “==”和“equals()”的区别 🔥：前者比较的是基本数据类型的数值和引用类型的“对象地址”；后者不能用来比较基本数据类型，而在一些引用类型（未重写equals时）中比较“对象地址”，在另一些（重写了equals时，如String，Date，包装器类型）中比较对象的值。 基本类型存储的是实际的数值，而并非指向一个对象的引用；而引用类型则不是这样（易出现“ 别名现象 ”） a++和a–：先赋值再计算； ++a和–a：先计算再赋值 使用逻辑操作符时，“短路”的发生可以获得潜在的性能提升 BigInteger和BigDecimal是用于int和float高精度计算的两个类，支持任意精度的整数和浮点数，计算值不丢失任何信息；但是需要用方法调用来取代运算符实现运算，所以会慢一些 单精度浮点数的表示范围（4bytes）：-3.40E+38~3.40E+38 双精度浮点数的表示范围（8bytes）：-1.79E+308~-1.79E+308 Java中的小数默认是double类型，若需得到float类型要进行类型转换 二进制编码（原码—反码—补码） 通常，表达式中出现的最大的数据类型决定了表达式最终的数据类型（e.g. 将一个float值和一个double值相乘，结果是double）；只要比int小的类型（char，byte和short），在运算之前，值都会自动转换成int Java中包含的控制执行语句主要有“if-else, while, do-while, for, foreach, return, break, continue, switch-case”，不支持goto语句 构造方法：每个类都有至少一个构造方法，若没有显示定义一个构造方法，编译器会自动创建一个默认构造器（无参）；而若显示定义了构造方法，默认构造器就不会被创建。除构造方法外，Java编译器中禁止在其他任何方法中调用构造方法。 方法重载。 this关键字，用于在方法的内部获得对当前对象的引用；可以解决参数名和数据成员名相同时出现的歧义问题 finalize方法（终结处理）是危险的，多余的【垃圾回收】 在类的内部，变量定义的先后顺序决定了初始化的顺序(先静态对象，再非静态对象)，即使变量定义散布于方法定义间，它们依旧会在任何方法（包括构造方法）被调用之前就得到初始化 对象的创建过程 [e.g. HelloLulu/src/constructor/StaticInitialization.java] package和import关键字允许程序员做的，是将单一的全局名字空间分割开，使得不论多少人使用Internet（因为在发布Java程序时，package的名称一般使用反顺序的域名）和Java编写类都不会出现名称冲突的问题 访问权限控制可以确保不会有任何客户端程序员依赖于某个类的底层实现的任何部分，也能简化他们对类的理解 🔥 Java访问权限修饰词 🔥：包访问权限（无任何访问权限修饰时）；public（该成员声明自己对每个人都是可用的）；private（除了包含该成员的类外，其他任何类都无法访问这个成员）；protected（继承访问权限+包访问权限） Java中的类仅有public和包访问权限两个选择。如果不希望任何其他人访问该类，可以将类中所有的构造方法设置为private，阻止任何人创建类的对象。 组合与继承 【继承时，创建的导出类的对象中，包含了一个基类的子对象】Java会自动在导出类的构造器中插入对基类默认构造器的调用，且这种调用是从基类“向外”扩散的。（基类构造器有参数列表时，要显示调用super()） 代理——&gt;将成员对象置于要构造的类中，并且在新类中暴露该成员对象的底层部分方法子集，使用新类的方法来这些方法。 try{}finally{}，try关键字下面的块是保护区，表示需要被特殊处理，其中一项特殊处理就是“不论try块如何退出，finally子句中的代码总是要被执行” 重载与重写 final关键字：从设计角度来决定是否使用final，而不要从性能角度 修饰字段：一个永不改变的编译时常量；一个在运行时被初始化的且不能被改变的数值或者引用 修饰参数：保证在方法中无法更改final修饰的参数（数值/引用） 修饰方法：锁定方法，防止任何继承类重写 修饰类：永远不能被继承（因为final类禁止继承，因此final类中所有方法都隐式指定为final，因为无法覆盖他们） 继承与初始化过程[e.g. HelloLulu/src/Inheritance/Test.java] 对象的清理是按创建对象的逆序完成的 👉👉👉 多态 👌👌👌 动态绑定（后期绑定）【编译器一直不知道对象的类型，但是方法调用机制能找到正确的方法体并加以调用】，Java中除了static方法(构造器是隐式的static方法)和final方法(private包括其中)以外，其他所有方法都执行后期绑定； Java是通过Class对象执行其RTTI（Run-time Type Identification）来实现多态的 注意：任何域访问操作都将由编译器解析，因此不是多态的 ======&gt;所以，一般将域设置为private，然后通过get和set方法来访问 编写构造器时的一条有效准则（尽量做到）：用尽可能简单的方法使对象进入正常状态，若可以的话，避免调用其他方法【在构造器内，唯一能安全调用的是基类的final方法】。 继承中，向上转型是安全的，但会丢失类型信息；向下转型是有风险的(Java中使用RTTI[运行时类型检查]来保证安全)，但是可以获取具体类型信息。 Java中所有类都有一个Class类的对象。 所有类都继承于java.lang.Object类 抽象类：不一定含有抽象方法，但是具有一个或多个抽象方法的类必须声明为抽象类。继承抽象类时可以不实现其所有抽象方法，这样的话子类也必须声明为抽象类。抽象类是不能创建实例对象的。 接口：相当于一个完全抽象的类，其中所有域都隐式地定义为static和final。在实现一个接口时，在接口中被定义的方法必须被定义为public。接口可以降低方法与类之间的耦合。 接口与抽象类的使用场景【接口可以支持多实现，达到多重继承的效果；抽象类可以将每个子类都具有相同实现的方法声明为非抽象方法，减少冗余；接口可以实现方法与具体实现的完全分离，更利于代码调试和维护；抽象类可以保证类与类之间的层级关系，但是也可能使类与类之间耦合度过高，继承过于复杂】 内部类与匿名内部类]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis持久层框架]]></title>
    <url>%2F2018%2F10%2F22%2FMyBatis%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[MyBatisJava应用可以通过MyBatis框架访问数据库POJO：Plain Ordinary Java Object（简单Java对象），特指与数据库打交道的Java对象对MyBatis的理解：MyBatis是一个持久层框架，用于Java应用访问数据库。先将对数据库表（POJO类）的操作与SQL语言映射起来（XML或注解实现），然后用面向对象的编程方式（操作Mapper接口）来操作数据库完成事务。使用制造者模式创建（通过mybati-config.xml）一个单例的session工厂，再运用工厂模式来创建一个个session完成事务请求。MyBatis相比较Hibernate而言更加灵活高效，因为它不屏蔽SQL语句，并且支持动态SQL。 MyBatis核心组件（必须厘清思路）SqlSessionFactoryBuilder：按照Builder模式来生成SqlSessionFactory。创建完SqlSessionFactory就应该关闭。 SqlSessionFactory：相当于对数据库的Connection池，用于生成MyBatis的核心接口对象SqlSession【通常是单例模式】。SqlSessionFactory 的生命周期就等同于 MyBatis 的应用周期。 SqlSession：相当于一个Connection对象，有DefaultSqlSession（单线程）和SqlSessionManager（多线程）两个实现类。它应该存活在一个业务请求中，处理完整个请求后，应该关闭这条连接，让它归还给 SqlSessionFactory。 SQLMapper：两种实现映射器的方式（XML与注解）。它的生命周期应该小于等于 SqlSession 的生命周期，代表一个业务请求中的业务处理 【SQLSession和SqlMapper都可以发送SQL语句，后者更符合面向对象编程的语法规则】 MyBatis配置configMyBatis的配置项顺序不能颠倒 MyBatis映射器mapper（Mybatis最复杂的部分）映射器由一个接口和XML文件组成（或注解），通过操作接口对象来完成数据库事务 映射器的配置元素： 配置元素 备注 select 查询 insert 插入 delete 删除 update 更改 sql 定义Sql语句的一部分，以供重复使用 cache 开启SqlSessionFactory层面的二级缓存，搭配实现了java.io.Serializable接口的POJO对象 cache-ref 引用其他映射器的缓存设置 resultMap 复杂[用于级联] MyBatis级联：鉴别器、一对多、一对一（看得很晕。。。标记一下） MyBatis缓存（支持一级缓存和二级缓存） 动态SQL（用于映射XML） 元素 作用 备注 if 判断语句 单条件分支判断 choose (when, otherwise) 相当于 Java 中的 switch 和 case 语句 多条件分支判断【if-elif-else】 trim {where, set) 辅助元素，用于处理特定的SQL拼装问题，比如去掉多余的and/or等 用于处理SQL拼装的问题 foreach 循环语句 在in语句等列举条件常用 test 判断真假 可以做字符串或数值判断，和if通常连用 bind 循环语句 通过OGNL表达式去自定义一个上下文变量]]></content>
      <categories>
        <category>SSM学习之路</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSM框架及Redis入门🎶🎶🎶]]></title>
    <url>%2F2018%2F10%2F22%2FSSM%E6%A1%86%E6%9E%B6%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[Spring IoC：控制反转（Inversion of Control）【IoC是一个容器，根据配置文件来管理JavaBean及其依赖关系】【如果想要一个对象(资源)，不再需要先new它，而只需要描述它，IoC将根据描述提供所需资源】 AOP： 面向切面编程（Aspect Oriented Programming）【通常情况下，需要用try catch finally语句来保持数据库事务的原子性和数据的一致性】【常用于数据库事务。默认情况下，只要让Spring接受到异常消息，就能让数据库事务回滚，保持数据的一致性】 MyBatis：是一个持久层框架Hibernate：通过映射关系来将数据库表和POJO对应起来，完全消除了SQL语句，而只需要操作POJO来操作对应的数据库表（但是存在性能瓶颈）MyBatis：与Hibernate业务逻辑基本一致，也是将数据库表映射为POJO，但是它需要接口和SQL（没有屏蔽SQL，可以自己制定SQL规则，更能满足高并发高响应的性能需求） Spring MVC Model （模型），封装了应用程序的数据和由它们组成的 POJO 。 View （视图），负责把模型数据渲染到视图上，将数据以一定的形式展现给用户。 Controller （控制器），负责处理用户请求，并建立适当的模型把它传递给视图渲染 Redis—-互联网最流行的NoSQLRedis具备一定的持久层功能，也能作为一种缓存工具，提高性能 优点： 存储半结构化数据，写入更快 支持大数据写入内存 从内存中读写数据比在数据库中读写数据要快很多很多 缺点： 结构松散，不完整，功能有限 Redis特点： 响应快速：Redis 响应非常快，每秒可以执行大约110000个写入操作，或者81000个读操作 支持6中数据类型：字符串，哈希结构，列表，集合，可排序集合，基数 所有操作都是原子的 MultiUtility工具]]></content>
      <categories>
        <category>SSM学习之路</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>Spring</tag>
        <tag>Redis</tag>
        <tag>Spring MVC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java反射与动态代理]]></title>
    <url>%2F2018%2F10%2F22%2FJava%E5%8F%8D%E5%B0%84%E4%B8%8E%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%2F</url>
    <content type="text"><![CDATA[反射在程序运行时动态创建对象和调用方法，而不需要在提前在程序中写死 Java反射相比较直接new对象而言，更加灵活，很适合框架开发，但是会有一些性能损耗 反射技术是IoC实现的基础，IoC通过读取配置文件来利用Java反射动态地创建对象和调用方法 Book book = null; // **包起来的是灵活可变的参数 try{ book = (Book)Class.forName(&quot;*package path*&quot;).getConstructor(&quot;*parameter list*&quot;).newInstance(&quot;*parameters*&quot;); Method method = book.getClass().getMethod(&quot;*method name*&quot;,&quot;*parameter list*&quot;); method.invoke(book, &quot;*paremeters*&quot;) } catch(.....){ } 动态代理 👩‍💻👩‍💻👩‍💻 Hard生成一个代理对象，来控制对真实对象的访问 1.用getProxy生成代理对象；2.制定代理的逻辑类【代理逻辑类要实现一个接口的一个方法，该方法就是代理对象的逻辑方法，可以控制真实对象的方法】 JDK动态代理： 需要接口 【绕得不行啊啊啊，慢慢来慢慢理解】 // 定义一个接口if,作为代理类 // 用ifImpl类实现if，作为真实对象类 // 定义一个JdkProxy类实现InvocationHandler接口：用bind()方法得到一个代理对象proxy；用invoke()方法来描述代理逻辑[在proxy调用方法时，就会进入invoke] // 拦截器模式时：程序员只需要关注拦截器提供的接口需要实现哪些方法，而不需要管具体的代理逻辑了。在有拦截器时拦截；无拦截器时就直接反射真实对象的方法了。 // 测试时，先用真实对象[ifImpl类]调用bind得到一个代理对象[if类]，用代理对象去调用具体方法 CGLIB动态代理：不需要接口 一些设计模式责任链模式：对应于一个对象在多个角色中处理的场景 观察者模式：一（被观察者，继承Observable类）对多（观察者，实现Observer接口）的依赖关系 工厂模式：只需要告知工厂需要什么对象，而不需要关注工厂如何创建对象 建造者模式：可以将一个产品的内部表象（属性〉与产品的生成过程分割开来，从而使一个建造过程生成具有不同的内部表象的产品对象。]]></content>
      <categories>
        <category>SSM学习之路</category>
      </categories>
      <tags>
        <tag>Java反射</tag>
        <tag>动态代理</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello Hexo]]></title>
    <url>%2F2018%2F09%2F25%2Fhello%20hexo%2F</url>
    <content type="text"><![CDATA[终于有了自己的小天地^_^那么……先记录一个坑吧…… 使用hexo-admin插件时，需要在配置文件_config.yml中新增如下的部分： 如上，官方给的示意图上的password_hash是md5密码，而hexo-admin却明确表示需要使用bcrypt密码。于是，我用java、python分别生成了一波bcrypt加密后的password_hash（bcrypt的特性是每次生成的随机散列值都不！一！样！），然后怀着激动的心情将如下密文paste在_config.yml的password_hash位置上。 果不其然，出现了bug！ o(￣︶￣)o 不管使用哪一个随机散列，输入的密码和配置的bcrypt密码都不对应。 我百度啊百度，看到了这篇博客，恍然大悟，原来不同版本nodejs使用的hash算法不一样，自然和java、python等的hash算法也可能有所不同。 顺着博客指导的操作，我使用nodejs的bcrypt算法计算出了password的hash值，paste到配置文件，在git bash中输入“hexo server -d” 问题解决了，完美登录！ 但是，我陷入了思考。 对同样的字符串，bcrypt每次生成的密码都是不一样的，那么后台的登录逻辑到底是什么样的呢？ 于是我查了bcrypt判定password和password_hash是否一致的算法，如下： 嗦嘎，原来是通过通过某种神秘算法，对我输入的password和预先配置好的password_hash进行计算，如果result==password_hash，那么匹配成功！ 不得不感叹，做密码学研究和信息安全的才是真大佬，这种神秘算法是怎么想出来的哟！ 妙啊]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
  </entry>
</search>
